%%% -------------------------------------------------------------------
%%% Author	: Bikram Chatterjee
%%% Description	: 
%%%
%%% Created	: 30.09.2011
%%% -------------------------------------------------------------------

-module(sub_info_app).

-behaviour(application).

%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
-include("../include/sub_info_records.hrl"). 

%% --------------------------------------------------------------------
%% Behavioural exports
%% --------------------------------------------------------------------

-export([start/2, stop/1]).

%% --------------------------------------------------------------------
%% Internal exports
%% --------------------------------------------------------------------

-export([]).


%% --------------------------------------------------------------------
%% Macros
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% Records
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% API Functions
%% --------------------------------------------------------------------


%% ====================================================================!
%% External functions
%% ====================================================================!
%% --------------------------------------------------------------------
%% Func: start/2
%% Returns: {ok, Pid}        |
%%          {ok, Pid, State} |
%%          {error, Reason}
%% --------------------------------------------------------------------
start(_Type, StartArgs) ->
	case net_adm:world() of
		{error, Error} -> {error, {clustering_error, Error}};
		_ ->
			mnesia:start(),
			case sub_info_super:start_link(StartArgs) of
				{ok, Pid} ->
					{ok, Pid};
				Error ->
					Error
			end
	end.
%% 	case ping_list(?CLUSTER_NODES) of
%% 		pong ->
%% 			mnesia:start(),
%% 			case sub_info_super:start_link(StartArgs) of
%% 				{ok, Pid} ->
%% 					{ok, Pid};
%% 				Error ->
%% 					Error
%% 			end;
%% 		_ ->
%% 			{error, {cluster_nodes_down, ?CLUSTER_NODES}}
%% 	end.

%% --------------------------------------------------------------------
%% Func: stop/1
%% Returns: any
%% --------------------------------------------------------------------
stop(_State) ->
	io:format(user, "Stopping ~p~n", [?MODULE]),
	ok.

%% ====================================================================
%% Internal functions
%% ====================================================================

%% ping_list([]) -> pang;
%% ping_list([N|Nodes]) ->
%% 	case net_adm:ping(N) of
%% 		pang -> ping_list(Nodes);
%% 		_ -> pong
%% 	end.
