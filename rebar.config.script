%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=erlang et

VersionStr = erlang:system_info(version),
{match, [VersionMajor]} = re:run(VersionStr, "([0-9]).*"
                               , [{capture, [1], list}]),
Version = list_to_integer(VersionMajor),

Deps = case lists:keyfind(deps,1,CONFIG) of
           {deps, Ds} -> Ds;
           false -> []
       end,

{IsJsonNif, CONFIG1} =
    case lists:keytake(json_nif, 1, CONFIG) of
        {value, {json_nif, IsNifTrue}, NConf} -> {IsNifTrue, NConf};
        false -> {false, CONFIG}
    end,

{TryJsonMap, CONFIG2} =
    case lists:keytake(json_maps, 1, CONFIG1) of
        {value, {json_maps, IsMapTrue}, NConf1} -> {IsMapTrue, NConf1};
        false -> {false, CONFIG1}
    end,

{IsJsonMap, CONFIG3} =
    if TryJsonMap andalso (Version >= 6) ->
           case lists:keyfind(erl_opts,1,CONFIG2) of
               {erl_opts, ErlOpts} ->
                   io:format("MAP (version ~s) : ok~n"
                             , [VersionStr]),
                   {true, lists:keyreplace(
                            erl_opts, 1, CONFIG2
                            , {erl_opts
                               , ErlOpts ++ [{d, 'MAPS', true}]})};
               false ->
                   {true, CONFIG2 ++ [{erl_opts, [{d, 'MAPS', true}]}]}
           end;
       true ->
           if TryJsonMap ->
                  io:format("MAP (version ~s) : none~n"
                            , [VersionStr]);
              true -> ok
           end,
           {false, CONFIG2}
    end,

NewDeps =
    case {IsJsonNif, IsJsonMap} of
        {true, _} ->
                  lists:keydelete(jsxn, 1
                                  , lists:keydelete(jsx, 1
                                                    ,Deps));
              {_, true} ->
                  lists:keydelete(jiffy, 1
                                  , lists:keydelete(jsx, 1
                                                    ,Deps));
              {_, _} ->
                  lists:keydelete(jiffy, 1
                                  , lists:keydelete(jsxn, 1
                                                    ,Deps))
end,

CONFIG4 =
    if IsJsonNif ->
           io:format("JSON NIF (version ~s) : ok~n"
                     , [VersionStr]),
           case lists:keyfind(erl_opts,1,CONFIG3) of
               {erl_opts, ErlOpts1} ->
                   lists:keyreplace(
                     erl_opts, 1, CONFIG3
                     , {erl_opts
                        , ErlOpts1 ++ [{d, 'JSONNIF', true}]});
               false ->
                   CONFIG3 ++ [{erl_opts, [{d, 'JSONNIF', true}]}]
           end;
   true ->
       io:format("JSON NIF (version ~s) : none ("
                 "set {json_nif, true} in rebar.config"
                 " to enable)~n"
                 , [VersionStr]),
       CONFIG3
end,


NewConfig = lists:keyreplace(deps, 1, CONFIG4, {deps, NewDeps}),

%io:format("doing ~p~n", [NewConfig]),
NewConfig.
